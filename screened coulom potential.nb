(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.4' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     47502,        942]
NotebookOptionsPosition[     46514,        907]
NotebookOutlinePosition[     46888,        923]
CellTagsIndexPosition[     46845,        920]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
    "Needs", "[", "\"\<DifferentialEquations`NDSolveProblems`\>\"", "]"}], 
    ";"}], "\n", 
   RowBox[{
    RowBox[{
    "Needs", "[", "\"\<DifferentialEquations`NDSolveUtilities`\>\"", "]"}], 
    ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.7023820987663755`*^9, 3.702382101544586*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{"NDSolve", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"y", "''"}], "[", "x", "]"}], "==", 
        RowBox[{
         RowBox[{"y", "[", "x", "]"}], "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "2"}], "/", 
              RowBox[{"(", "x", ")"}]}], ")"}], "*", 
            RowBox[{"Exp", "[", 
             RowBox[{
              RowBox[{"-", "0"}], "*", "x"}], "]"}]}], "-", 
           RowBox[{"2", "*", 
            RowBox[{"(", 
             RowBox[{"-", "0.49990011528759767386"}], ")"}]}]}], ")"}]}]}], 
       ",", 
       RowBox[{
        RowBox[{"y", "[", "0.00005", "]"}], "\[Equal]", "0"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"y", "'"}], "[", "0.00005", "]"}], "==", "1"}]}], " ", "}"}],
      ",", "y", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0.00005", ",", "300"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{
     RowBox[{"y", "[", "x", "]"}], "/.", "s"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "45"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"FindMinValue", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "/.", "s"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "20"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{
  3.7023799056516776`*^9, {3.7023799698167744`*^9, 3.7023800257527556`*^9}, {
   3.7023800641862965`*^9, 3.702380122312369*^9}, {3.7023803104234505`*^9, 
   3.702380324082312*^9}, {3.7023803541833496`*^9, 3.702380355733222*^9}, {
   3.7023809308626256`*^9, 3.702380931323163*^9}, 3.7023810732077475`*^9, {
   3.7023811885861654`*^9, 3.7023811947563314`*^9}, {3.702381275723239*^9, 
   3.702381276156926*^9}, {3.7023814697873106`*^9, 3.702381486142214*^9}, {
   3.702381712379289*^9, 3.70238173484696*^9}, {3.7028245854769526`*^9, 
   3.702824639341135*^9}, {3.7028247106252112`*^9, 3.7028250850629644`*^9}, {
   3.702825164825633*^9, 3.7028255512222447`*^9}, {3.702825720959427*^9, 
   3.70282573934958*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
h8qgyeZurAEkVzCB6jf2jv8BvVLiHA==
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Large,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7023800721976824`*^9, 3.702380123848307*^9}, 
   3.7023803255338216`*^9, 3.702380356543611*^9, 3.7023809327034473`*^9, 
   3.702381199739594*^9, 3.702381277367836*^9, {3.7023814728648887`*^9, 
   3.702381495162241*^9}, 3.702381735954585*^9, 3.7028203462671733`*^9, {
   3.7028245868243265`*^9, 3.702824605160567*^9}, 3.7028246422406425`*^9, {
   3.70282471238338*^9, 3.702824919392686*^9}, {3.70282497588488*^9, 
   3.7028250854787474`*^9}, {3.702825165672346*^9, 3.7028251775032444`*^9}, {
   3.702825220116062*^9, 3.7028255335292263`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"InterpolatingFunction", "::", "dmval"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Input value \[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \
\\\"2540.`\\\", \\\"}\\\"}]\\)\[NoBreak] lies outside the range of data in \
the interpolating function. Extrapolation will be used. \\!\\(\\*ButtonBox[\\\
\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/InterpolatingFunction/dmval\\\", \
ButtonNote -> \\\"InterpolatingFunction::dmval\\\"]\\)\"\>"}]], "Message", \
"MSG",
 CellChangeTimes->{{3.702825325014655*^9, 3.7028255335604773`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"InterpolatingFunction", "::", "dmval"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Input value \[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \
\\\"2540.`\\\", \\\"}\\\"}]\\)\[NoBreak] lies outside the range of data in \
the interpolating function. Extrapolation will be used. \\!\\(\\*ButtonBox[\\\
\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/InterpolatingFunction/dmval\\\", \
ButtonNote -> \\\"InterpolatingFunction::dmval\\\"]\\)\"\>"}]], "Message", \
"MSG",
 CellChangeTimes->{{3.702825325014655*^9, 3.70282553359824*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"InterpolatingFunction", "::", "dmval"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Input value \[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \
\\\"2540.0000378489494`\\\", \\\"}\\\"}]\\)\[NoBreak] lies outside the range \
of data in the interpolating function. Extrapolation will be used. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/InterpolatingFunction/dmval\\\", \
ButtonNote -> \\\"InterpolatingFunction::dmval\\\"]\\)\"\>"}]], "Message", \
"MSG",
 CellChangeTimes->{{3.702825325014655*^9, 3.7028255336138678`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \
\[NoBreak]\\!\\(\\*StyleBox[RowBox[{\\\"InterpolatingFunction\\\", \
\\\"::\\\", \\\"dmval\\\"}], \\\"MessageName\\\"]\\)\[NoBreak] will be \
suppressed during this calculation. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\
\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/stop\\\", ButtonNote -> \
\\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.702825325014655*^9, 3.7028255336451187`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"FindMinValue", "::", "sdprec"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Line search unable to find a sufficient decrease in the \
function value with \[NoBreak]\\!\\(\\*RowBox[{\\\"MachinePrecision\\\"}]\\)\
\[NoBreak] digit precision. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/FindMinValue\\\", ButtonNote -> \
\\\"FindMinValue::sdprec\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.702825325014655*^9, 3.7028255337319136`*^9}}],

Cell[BoxData[
 RowBox[{"-", "1.0013529481909062`*^151"}]], "Output",
 CellChangeTimes->{{3.7023800721976824`*^9, 3.702380123848307*^9}, 
   3.7023803255338216`*^9, 3.702380356543611*^9, 3.7023809327034473`*^9, 
   3.702381199739594*^9, 3.702381277367836*^9, {3.7023814728648887`*^9, 
   3.702381495162241*^9}, 3.702381735954585*^9, 3.7028203462671733`*^9, {
   3.7028245868243265`*^9, 3.702824605160567*^9}, 3.7028246422406425`*^9, {
   3.70282471238338*^9, 3.702824919392686*^9}, {3.70282497588488*^9, 
   3.7028250854787474`*^9}, {3.702825165672346*^9, 3.7028251775032444`*^9}, {
   3.702825220116062*^9, 3.702825533732914*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.702820369247135*^9, 3.7028203758258443`*^9}, {
   3.7028204107341127`*^9, 3.702820441679657*^9}, {3.702820500982374*^9, 
   3.702820504880441*^9}, {3.702820595864599*^9, 3.7028206429322286`*^9}, 
   3.7028246119267654`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"FindMinValue", "::", "lstol"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"The line search decreased the step size to within the \
tolerance specified by AccuracyGoal and PrecisionGoal but was unable to find \
a sufficient decrease in the function. You may need more than \
\[NoBreak]\\!\\(\\*RowBox[{\\\"MachinePrecision\\\"}]\\)\[NoBreak] digits of \
working precision to meet these tolerances. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/FindMinValue\\\", ButtonNote -> \
\\\"FindMinValue::lstol\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.70282459196734*^9}],

Cell[BoxData["0.2658320949949932`"], "Output",
 CellChangeTimes->{
  3.702820448291213*^9, 3.7028205058407965`*^9, {3.7028206069055314`*^9, 
   3.70282064318402*^9}, 3.7028245919688406`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClassicalRungeKuttaCoefficients", "[", 
   RowBox[{"4", ",", "prec_"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"amat", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", "/", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"1", "/", "2"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], ",", 
      RowBox[{"bvec", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "6"}], ",", 
         RowBox[{"1", "/", "3"}], ",", 
         RowBox[{"1", "/", "3"}], ",", 
         RowBox[{"1", "/", "6"}]}], "}"}]}], ",", 
      RowBox[{"cvec", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], ",", 
         RowBox[{"1", "/", "2"}], ",", "1"}], "}"}]}]}], "}"}], ",", 
    RowBox[{"N", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"amat", ",", "bvec", ",", "cvec"}], "}"}], ",", "prec"}], 
     "]"}]}], "]"}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"sol", " ", "=", " ", 
   RowBox[{"NDSolve", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"z", "''"}], "[", "x", "]"}], "\[Equal]", 
        RowBox[{
         RowBox[{"z", "[", "x", "]"}], "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "2"}], "/", 
              RowBox[{"(", "x", ")"}]}], ")"}], "*", 
            RowBox[{"Exp", "[", 
             RowBox[{
              RowBox[{"-", "0"}], "*", "x"}], "]"}]}], "-", 
           RowBox[{"2", "*", 
            RowBox[{"(", 
             RowBox[{"-", "0.5"}], ")"}]}]}], ")"}]}]}], ",", 
       RowBox[{
        RowBox[{"z", "[", "0.00005", "]"}], "\[Equal]", "0"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"z", "'"}], "[", "0.00005", "]"}], "==", "1"}]}], " ", "}"}],
      ",", "z", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0.00005", ",", "300"}], "}"}], ",", 
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<ExplicitRungeKutta\>\"", ",", 
        RowBox[{"\"\<DifferenceOrder\>\"", "\[Rule]", "4"}], ",", 
        RowBox[{
        "\"\<Coefficients\>\"", "\[Rule]", 
         "ClassicalRungeKuttaCoefficients"}]}], "}"}]}], ",", 
     RowBox[{"StartingStepSize", "\[Rule]", 
      RowBox[{"5", "/", "10000"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"z", "[", "t", "]"}], "/.", "sol"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "10"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"FindMinValue", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"z", "[", "x", "]"}], "/.", "sol"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.702382177132588*^9, 3.7023822082440057`*^9}, {
   3.702382247117852*^9, 3.702382247957737*^9}, {3.70238229694849*^9, 
   3.70238232444219*^9}, {3.7028217841524024`*^9, 3.702821837187516*^9}, {
   3.7028218691079793`*^9, 3.702821889334692*^9}, 3.7028219309068885`*^9, {
   3.7028222443055825`*^9, 3.702822244480813*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
/U/8XQFULR/5u7tLRPZSz4sDGwrgf3J0kBs=
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{704., Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{0, 10}, {-0.00004979571254871268, 0.3682813435825624}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.702382189998098*^9, 3.702382209120329*^9}, 
   3.7023822486006184`*^9, {3.702382302623391*^9, 3.7023823279206467`*^9}, {
   3.7028218087958975`*^9, 3.7028218148636737`*^9}, {3.7028218462880406`*^9, 
   3.702821911370738*^9}, 3.7028221492740192`*^9, 3.7028222477545304`*^9}],

Cell[BoxData["0.010874084686820372`"], "Output",
 CellChangeTimes->{{3.702382189998098*^9, 3.702382209120329*^9}, 
   3.7023822486006184`*^9, {3.702382302623391*^9, 3.7023823279206467`*^9}, {
   3.7028218087958975`*^9, 3.7028218148636737`*^9}, {3.7028218462880406`*^9, 
   3.702821911370738*^9}, 3.7028221492740192`*^9, 3.7028222483461246`*^9}]
}, Open  ]]
},
WindowSize->{1536, 781},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
Magnification:>1.1 Inherited,
FrontEndVersion->"10.4 for Microsoft Windows (64-bit) (April 11, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 394, 11, 93, "Input"],
Cell[CellGroupData[{
Cell[977, 35, 2320, 60, 73, "Input"],
Cell[3300, 97, 23068, 390, 407, "Output"],
Cell[26371, 489, 637, 12, 23, "Message"],
Cell[27011, 503, 634, 12, 23, "Message"],
Cell[27648, 517, 652, 13, 23, "Message"],
Cell[28303, 532, 603, 12, 23, "Message"],
Cell[28909, 546, 575, 11, 23, "Message"],
Cell[29487, 559, 630, 9, 33, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30154, 573, 272, 4, 32, "Input"],
Cell[30429, 579, 704, 13, 43, "Message"],
Cell[31136, 594, 190, 3, 33, "Output"]
}, Open  ]],
Cell[31341, 600, 1097, 34, 32, "Input"],
Cell[CellGroupData[{
Cell[32463, 638, 2169, 58, 93, "Input"],
Cell[34635, 698, 11516, 200, 494, "Output"],
Cell[46154, 900, 344, 4, 33, "Output"]
}, Open  ]]
}
]
*)

